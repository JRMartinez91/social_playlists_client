{"version":3,"sources":["components/Home.js","components/PlaylistByID.js","components/CreatePlaylist.js","components/EditPlaylist.js","components/Userpage.js","components/TrackByID.js","components/AllPlaylists.js","components/AllUsers.js","components/TagSearch.js","components/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","recentPlaylists","fetch","then","response","json","setState","catch","error","console","log","this","getPlaylists","map","playlist","href","id","title","user","username","Component","PlaylistByID","parseTracks","bind","parseUser","headers","Authorization","localStorage","getItem","login","match","params","getPlaylist","checkLogin","result","tracks","playlist_id","trackList","length","track","push","position","key","artist","tags","user_id","CreatePlaylist","title0","artist0","url0","boxes","getUser","handleChange","handleSubmit","incrementEntryBoxes","decrementEntryBoxes","handleTrackFormChange","event","target","value","index","newTracks","newID","preventDefault","body","JSON","stringify","method","createdPlaylist","jsonPlaylist","pos","i","url","createdTrack","jsonTrack","pop","newBox","htmlFor","type","onChange","onSubmit","renderEntryBox","onClick","EditPlaylist","initialBoxes","handleTitleChange","handleTagChange","handleDelete","addTracksToState","newPlaylist","answer","prompt","fieldName","replace","data","ln","Userpage","parsePlaylists","session_id","playlists","TrackByID","parseForwardButton","parsePlaylistLink","parseBackButton","parseTrackInfo","displayVideo","track_position","width","height","src","setTimeout","parseInt","AllPlaylists","AllUsers","users","parseUsers","getUsers","TagSearch","alltags","searchterm","parseAllTags","searchTerm","jsonTags","getAllTags","masterlist","obj","arr","split","e","includes","LoginPage","handleLogin","handleCreateUser","password","setItem","token","new_username","new_password","newUser","jsonUser","App","parseLogin","parseUserpage","forceLogout","forceUpdate","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6da52e3d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Home extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            recentPlaylists:[]\n        }\n    }\n\n    getPlaylists(){\n        //Home page retrieves Playlists and displays them in chronological order\n        fetch('https://share-a-mixtape.herokuapp.com/playlists/recent')\n        .then(response=>response.json())\n        .then(json => this.setState({recentPlaylists: json}))\n        .catch(error => console.error(error))\n        console.log(\"get Playlists\")\n    }\n\n    componentDidMount(){\n        this.getPlaylists();\n    }\n\n    render(){\n        return(\n            <>\n            <h1>Home Page</h1>\n            <h2>Recent Playlists:</h2>\n            <ol>\n            { this.state.recentPlaylists.map( playlist=>{\n            return(\n               <li>\n                   <h3><a href={`/playlist/${playlist.id}`}>\n                       {playlist.title}\n                   </a></h3>\n                   <h4><a href={`/users/${playlist.user.id}`}>\n                       By {playlist.user.username}\n                   </a></h4>\n               </li> \n            )\n        })}\n            </ol>\n            </>\n        )\n    }\n}\n\nexport default Home","import React, {Component} from 'react'\n\nclass PlaylistByID extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            playlist:{}\n        }\n        this.parseTracks = this.parseTracks.bind(this);\n        this.parseUser = this.parseUser.bind(this);\n    }\n\n    checkLogin(){\n        fetch('https://share-a-mixtape.herokuapp.com/users/session_id',{\n          headers:{\n            Authorization: `Bearer ${localStorage.getItem('mixtape_token')}`\n          }\n        })\n        .then(response=>response.json())\n        .then(json=>{\n          if(json.id){\n            this.setState({login:true,user:json})\n          }\n        })\n    }\n\n    getPlaylist(){\n        fetch(`https://share-a-mixtape.herokuapp.com/${this.props.match.params.id}`)\n            .then(response=>response.json())\n            .then(json => this.setState({playlist: json}))\n            .catch(error => console.error(error))\n        \n        console.log(\"get playlist\")\n    }\n\n    componentDidMount(){\n        this.getPlaylist();\n        this.checkLogin();\n    }\n\n    parseUser(){\n        const user = this.state.playlist.user;\n        let result = <p>Loading...</p>\n        if(user){\n            result = (\n                <h3><a href={`/users/${user.id}`}>By {user.username}</a></h3>\n            )\n        }\n        return result;\n    }\n\n    parseTracks(){\n        const tracks = this.state.playlist.tracks;\n        const playlist_id = this.state.playlist.id\n        let trackList = [];\n        //if playlist is not empty\n        if(tracks){\n            if(tracks.length >0){\n                tracks.map(track=>{\n                    trackList.push(\n                        <a href={`/track/${playlist_id}/${track.position}`}>\n                        <li key={track.id}><ul>\n                            <li>{track.title}</li>\n                            <li>{track.artist}</li>\n                            {/* <li>{track.url}</li> */}\n                        </ul></li>\n                        </a>\n                    )\n                })\n            } else {\n                trackList = <p>Playlist has no tracks!</p>\n            }\n        } else {\n            trackList = <p>Loading track list...</p>\n        }\n        return trackList;\n\n    }\n\n    render(){\n        return(\n            <>\n            <h1>Playlist By ID</h1>\n            <h2>{this.state.playlist.title}</h2>\n            <h4>Tags: {this.state.playlist.tags}</h4>\n            {this.state.user && (this.state.user.id == this.state.playlist.user_id) ?\n            <><a href={`/edit_playlist/${this.state.playlist.id}`}>Edit</a></>:<></>}\n            {this.parseUser()}\n            <ol>\n               {this.parseTracks()}\n            </ol>\n            </>\n        )\n    }\n}\n\nexport default PlaylistByID;","import React, {Component} from 'react'\n\nclass CreatePlaylist extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            title:'',\n            tags:'',\n            tracks:[\n                {title0:'',\n                artist0:'',\n                url0:''}\n            ],\n            boxes:0\n        }\n        this.getUser = this.getUser.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.incrementEntryBoxes = this.incrementEntryBoxes.bind(this);\n        this.decrementEntryBoxes = this.decrementEntryBoxes.bind(this);\n        this.handleTrackFormChange = this.handleTrackFormChange.bind(this);\n    }\n    \n    getUser(){\n        fetch('https://share-a-mixtape.herokuapp.com/session_id',{\n          headers:{\n            Authorization: `Bearer ${localStorage.getItem('mixtape_token')}`\n          }\n        })\n        .then(response=>response.json())\n        .then(json=>{\n          if(json.id){\n            this.setState({login:true,user:json})\n          }\n        })\n    }\n\n    componentDidMount(){\n        this.getUser()\n    }\n    handleChange(event){\n        this.setState({[event.target.id]: event.target.value})\n    }\n\n    handleTrackFormChange(index,event){\n        let newTracks = this.state.tracks;\n        newTracks[index] = {\n            ...newTracks[index],\n            [event.target.id]: event.target.value,\n        }\n        this.setState(\n            {tracks: newTracks}\n        )\n    }\n\n    handleSubmit(event){\n        let newID\n        event.preventDefault()\n        //get the current user to determine the foreign key to assign to the playlist\n\n        //this will be a multi step process\n        //first a POST request will create a new playlist\n        fetch('https://share-a-mixtape.herokuapp.com/playlists',{\n            body: JSON.stringify({\n                title:this.state.title,\n                //get the ID of the currently logged in user   \n                user_id:this.state.user.id\n            }),\n            method:'POST',\n            headers:{\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(createdPlaylist=>createdPlaylist.json()\n        ).then(jsonPlaylist => {\n            //once this playlist has been created, we'll hold on to it's ID#\n            //we will then use its ID# as a foreign key as we POST each of the tracks\n            newID = jsonPlaylist.id;\n            console.log('POST playlist: '+jsonPlaylist.title)\n            console.log(newID);\n            return newID\n        }).then(newID=>{\n            console.log(\"attempting track post\");\n            //handle positioning\n            let pos = 1\n            for(let i=0; i<=this.state.boxes; i++){\n                //if title or URL is blank, ignore\n                //else, post it.\n                if(this.state.tracks[i]['title'+i] && this.state.tracks[i]['url'+i]){\n                    console.log(\"loop: track post \"+i);\n                    fetch('https://share-a-mixtape.herokuapp.com/tracks',{\n                        body: JSON.stringify({\n                            title: this.state.tracks[i]['title'+i],\n                            artist: this.state.tracks[i]['artist'+i],\n                            url: this.state.tracks[i]['url'+i],\n                            playlist_id: newID,\n                            position: pos\n                        }),\n                        method:'POST',\n                        headers:{\n                            'Accept': 'application/json, text/plain, */*',\n                            'Content-Type': 'application/json'\n                        }\n                    }).then(createdTrack => {return createdTrack.json()})\n                    .then(jsonTrack => console.log(jsonTrack))\n                    .catch(error=>console.error(error));   \n                    //increment position only if a track has been added\n                    pos += 1   \n                }//end if\n            }//end for\n        })\n        .catch(error=>console.error(error))\n        \n    }\n\n    incrementEntryBoxes(){\n        this.setState({boxes: this.state.boxes+1})\n        let i = this.state.boxes+1\n        let newTracks = this.state.tracks\n        newTracks.push({\n            ['title'+i]:'',\n            ['artist'+i]:'',\n            ['url'+i]:''\n        })\n        this.setState({ tracks: newTracks})\n    }\n\n    decrementEntryBoxes(){\n        if(this.state.boxes>0){\n            this.setState({boxes: this.state.boxes-1})\n            this.state.tracks.pop();\n        }\n    }\n\n    renderEntryBox(){\n        //result is an array holding form entries\n        let result = []\n        //result begins as one entry box, as this.state.boxes begins as one\n        //for every extra box, a for-loop loops one more time, adding another\n        //  complete set of form labels \n        for(let i = 0; i <= this.state.boxes; i++){\n            let newBox = (\n                <fieldset>\n                    <legend>Track {i+1}</legend>\n                <label htmlFor={'title'+i}>Title</label>\n                <input type='text' value={this.state.tracks[i]['title'+i]} onChange={(event)=>{this.handleTrackFormChange(i,event)}} id={'title'+i}/>\n                <label htmlFor={'artist'+i}>Artist</label>\n                <input type='text' value={this.state.tracks[i]['artist'+i]} onChange={(event)=>{this.handleTrackFormChange(i,event)}} id={'artist'+i}/>\n                <label htmlFor={'url'+i}>URL</label>\n                <input type='text' value={this.state.tracks[i]['url'+i]} onChange={(event)=>{this.handleTrackFormChange(i,event)}} id={'url'+i}/>\n                </fieldset>\n            )\n            result.push(newBox);\n        }\n\n        return result;\n        \n    }\n\n\n    render(){\n        return(\n            <>\n            <h1>Create Playlist</h1>\n            { this.state.login?\n            <>\n            <p>\n                Entries with a blank Title or URL will be ignored!\n            </p>\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor='title'>Playlist Title</label>\n                <input type='text' onChange={this.handleChange} id='title'/>\n                <label htmlFor='tags'>Tags:</label>\n                <div>(Separate tags with spaces)</div>\n                <input type='text' id='tags' onChange={this.handleChange}/>\n                {this.renderEntryBox()}\n                <input type='submit'/>\n            </form>\n            <button onClick={this.incrementEntryBoxes}>Add Another Track</button>\n            <button onClick={this.decrementEntryBoxes}>Remove Last Track</button>\n            </>\n            : <p>You must log in to create a playlist!</p>}\n            </>\n    \n        )\n    }\n}\n\nexport default CreatePlaylist","import React, {Component} from 'react'\n\nclass EditPlaylist extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            playlist:{},\n            title:'',\n            tags:'',\n            tracks:[],\n            boxes:0,\n            initialBoxes:0\n        }\n        this.handleTitleChange = this.handleTitleChange.bind(this);\n        this.handleTagChange = this.handleTagChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.incrementEntryBoxes = this.incrementEntryBoxes.bind(this);\n        this.decrementEntryBoxes = this.decrementEntryBoxes.bind(this);\n        this.handleTrackFormChange = this.handleTrackFormChange.bind(this);\n        this.addTracksToState = this.addTracksToState.bind(this);\n    }\n\n    getUser(){\n        fetch('https://share-a-mixtape.herokuapp.com/users/session_id',{\n            headers:{\n              Authorization: `Bearer ${localStorage.getItem('mixtape_token')}`\n            }\n        })\n          .then(response=>response.json())\n          .then(json=>{\n            if(json.id){\n              this.setState({login:true,user:json})\n            }\n        })\n    }\n\n    getPlaylist(){\n        console.log(\"get playlist\")\n        fetch(`https://share-a-mixtape.herokuapp.com/playlists/${this.props.match.params.id}`)\n        .then(response=>response.json())\n        .then(json => {\n            this.setState({\n                playlist: json,\n                title: json.title,\n                tags: json.tags,\n                boxes:json.tracks.length-1,\n                initialBoxes:json.tracks.length-1\n            })\n        }\n        )\n        .catch(error => console.error(error))\n    \n    }\n\n    componentDidMount(){\n        this.getPlaylist(); \n        this.getUser(); \n    }\n\n    handleChange(event){\n        this.setState({[event.target.id]: event.target.value})\n    }\n\n    handleTitleChange(event){\n        let newPlaylist = this.state.playlist\n        newPlaylist.title = event.target.value\n        this.setState({playlist: newPlaylist})\n    }\n\n    handleTagChange(event){\n        let newPlaylist = this.state.playlist\n        newPlaylist.tags = event.target.value\n        this.setState({playlist: newPlaylist})\n    }\n\n\n    handleSubmit(event){\n        event.preventDefault()\n        let newID = ''\n        //this will be a multi step process\n        //first a POST request will create a new playlist\n        console.log(this.state.tags);\n        fetch(`https://share-a-mixtape.herokuapp.com/${this.state.playlist.id}`,{\n            body: JSON.stringify({\n                title:this.state.playlist.title,\n                //get the ID of the currently logged in user   \n                user_id:this.state.playlist.user_id,\n                tags:this.state.tags\n            }),\n            method:'PUT',\n            headers:{\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        }).then(\n            createdPlaylist=>createdPlaylist.json()\n        ).then(jsonPlaylist => {\n            //once this playlist has been created, we'll hold on to it's ID#\n            //we will then use its ID# as a foreign key as we POST each of the tracks\n            newID = jsonPlaylist.id;\n            console.log(jsonPlaylist)\n            console.log('UPDATE playlist: '+jsonPlaylist.title)\n            console.log('tags:',jsonPlaylist.tags )\n            console.log(newID);\n            return newID\n        }).then(newID=>{\n            console.log(\"attempting track post\");\n            ////////////\n            // IMPORTANT\n            //  ==> this part of the code must be redesigned to allow\n            //  adding NEW TRACKS to the edited playlist.\n            //  basically running a PUT for every number up to the original\n            //  length of playlist.tracks, and THEN running a POST for every\n            //  fieldset ABOVE that number.\n            //  ==> DELETE should be handled separately.\n            //  give every fieldset a thing that will mark it for deletion, stored\n            //  as an attribute of the track object in state.\n            //  as the following loop iterates, if a 'marked for deletion' attr is found,\n            //  run a DELETE request instead of a PUT.\n            ///////////\n\n            //handle positioning\n            let pos = 1\n\n            //run PUT requests for each track up to the amount that were\n            //already in the playlist\n            for(let i=0; i<=this.state.initialBoxes; i++){\n                console.log(\"PUT: track\",i+1,this.state.playlist.tracks[i].title)\n                //if title or URL is blank, ignore\n                //else, post it.\n                if(this.state.playlist.tracks[i]['title'] && this.state.playlist.tracks[i]['url']){\n                    fetch(`https://share-a-mixtape.herokuapp.com/${this.state.playlist.tracks[i].id}`,{\n                        body: JSON.stringify({\n                            title: this.state.playlist.tracks[i]['title'],\n                            artist: this.state.playlist.tracks[i]['artist'],\n                            url: this.state.playlist.tracks[i]['url'],\n                            playlist_id: this.state.playlist.id,\n                            position: pos\n                        }),\n                        method:'PUT',\n                        headers:{\n                            'Accept': 'application/json, text/plain, */*',\n                            'Content-Type': 'application/json'\n                        }\n                    }).then(createdTrack => {return createdTrack.json()})\n                    // .then(jsonTrack => console.log(jsonTrack))\n                    .catch(error=>console.error(error));     \n                    //increment position only if a track is added\n                    pos += 1 \n                }//end if\n            }//end for\n            //run POST requests for every track that was newly added\n            for(let i=this.state.initialBoxes+1; i<=this.state.boxes; i++){\n                //if title or URL is blank, ignore\n                //else, post it.\n                if(this.state.tracks[i]['title'] && this.state.tracks[i]['url']){\n                    console.log(\"POST: track \",i+1,this.state.playlist.tracks[i].title)\n                    fetch('https://share-a-mixtape.herokuapp.com/tracks',{\n                        body: JSON.stringify({\n                            title: this.state.tracks[i]['title'],\n                            artist: this.state.tracks[i]['artist'],\n                            url: this.state.tracks[i]['url'],\n                            playlist_id: newID,\n                            position: pos\n                        }),\n                        method:'POST',\n                        headers:{\n                            'Accept': 'application/json, text/plain, */*',\n                            'Content-Type': 'application/json'\n                        }\n                    }).then(createdTrack => {return createdTrack.json()})\n                    // .then(jsonTrack => console.log(jsonTrack))\n                    .catch(error=>console.error(error));     \n                    //increment position only if a track has been added\n                    pos += 1 \n                }//end if\n            }//end for\n        })\n    }\n\n    handleDelete(index,event){\n        // event.preventDefault();\n        let answer = prompt(`Are you sure you want to delete ${this.state.playlist.tracks[index].title}? Y/N`)\n        if(answer==\"y\"||answer==\"Y\"){\n            fetch(`https://share-a-mixtape.herokuapp.com/${this.state.playlist.tracks[index].id}`,{\n                method:'DELETE'\n            })\n            // this.forceUpdate();\n        }\n    }\n\n    handleTrackFormChange(index,event){\n        let newTracks = this.state.playlist.tracks;\n        let fieldName = event.target.id\n        fieldName = fieldName.replace(/[0-9]/,'');\n        newTracks[index] = {\n            ...newTracks[index],\n            [fieldName]: event.target.value,\n        }\n        let newPlaylist = this.state.playlist\n        newPlaylist={\n            ...newPlaylist,\n            tracks: newTracks\n        }\n        this.setState({playlist: newPlaylist})\n    }\n\n    incrementEntryBoxes(){\n        this.setState({boxes: this.state.boxes+1})\n        let newTracks = this.state.playlist.tracks\n        newTracks.push({\n            title:'',\n            artist:'',\n            url:''\n        })\n        this.setState({ tracks: newTracks})\n    }\n\n \n    decrementEntryBoxes(){\n        if(this.state.boxes>this.state.initialBoxes){\n            this.setState({boxes: this.state.boxes-1})\n            this.state.playlist.tracks.pop();\n        }\n    }\n\n    addTracksToState(){\n        //if the retrieved playlist has not yet had its tracks recorded in state\n        if(this.state.playlist.tracks){\n            let data = this.state.playlist\n            console.log(this.state.playlist);\n            if(this.state.playlist.tracks.length !== this.state.tracks.length){\n                let ln = 0\n                console.log(\"attempting addTrackstoState\")\n                console.log(\"playlist found\")\n                ln = data.tracks.length\n                this.setState({boxes: ln-1})\n                //loop through retrieved playlist and set the state to match it\n                let newTracks = this.state.tracks;\n                for(let i = 0; i<=ln; i++){\n                    newTracks[i] = {\n                        ['title'+i]: data.tracks[i].title,\n                        ['artist'+i]: data.tracks[i].artist,\n                        ['url'+i]: data.tracks[i].url\n                    }\n                }\n                this.setState({tracks: newTracks});\n            }\n        }\n    }\n\n    renderEntryBox(){\n        //render an entry box for each track in the playlist\n        //result is an array holding form entries\n        let result = []\n        //result begins as one entry box, as this.state.boxes begins as one\n        //for every extra box, a for-loop loops one more time, adding another\n        //  complete set of form labels \n        if(this.state.playlist.tracks){\n            if(this.state.playlist.tracks.length>0){\n                for(let i = 0; i < this.state.playlist.tracks.length; i++){\n                    let newBox = (\n                        <fieldset>\n                            <legend>Track {i+1}</legend>\n                        <label htmlFor={'title'+i}>Title</label>\n                        <input type='text' value={this.state.playlist.tracks[i]['title']} onChange={(event)=>{this.handleTrackFormChange(i,event)}} id={'title'+i}/>\n                        <label htmlFor={'artist'+i}>Artist</label>\n                        <input type='text' value={this.state.playlist.tracks[i]['artist']} onChange={(event)=>{this.handleTrackFormChange(i,event)}} id={'artist'+i}/>\n                        <label htmlFor={'url'+i}>URL</label>\n                        <input type='text' value={this.state.playlist.tracks[i]['url']} onChange={(event)=>{this.handleTrackFormChange(i,event)}} id={'url'+i}/>\n                        {i<=this.state.initialBoxes ? <button onClick={(event)=>{this.handleDelete(i,event)}}>Delete {i+1}</button> : ''}\n                        </fieldset>\n                    )\n                    // console.log(\"made box \",i)\n                    result.push(newBox);\n                }\n            }\n        }\n\n        return result;\n        \n    }\n\n    render(){\n        // this.addTracksToState();\n        return(\n            <>\n            <h1>Edit Playlist</h1>\n            { this.state.login && this.state.user.id == this.state.playlist.user_id?\n            <>\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor='title'>Playlist Title</label>\n                <input type='text' onChange={this.handleTitleChange} value={this.state.playlist.title} id='title'/>\n                <label htmlFor='tags'>Tags:</label>\n                <input type='text' id='tags' value={this.state.tags} onChange={this.handleChange}/>\n                <div>(Separate tags with spaces)</div>\n                {this.renderEntryBox()}\n                <input type='submit'/>\n            </form>\n            <button onClick={this.incrementEntryBoxes}>Add Track</button>\n            <button onClick={this.decrementEntryBoxes}>Remove Last Track</button>\n            </>:\n            <p>You are not authorized to edit this playlist!</p>\n            }\n            </>\n        )\n    }\n}\n\nexport default EditPlaylist","import React, {Component} from 'react'\n\nclass Userpage extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            user:{}\n        }\n        this.parsePlaylists = this.parsePlaylists.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n        // this.handleSubmit = this.handleSubmit.bind(this);\n        // this.incrementEntryBoxes = this.incrementEntryBoxes.bind(this);\n        // this.decrementEntryBoxes = this.decrementEntryBoxes.bind(this);\n        // this.handleTrackFormChange = this.handleTrackFormChange.bind(this);\n    }\n\n\n    getUser(){\n        fetch(`https://share-a-mixtape.herokuapp.com/users/${this.props.match.params.id}`)\n        .then(response=>response.json())\n        .then(json => this.setState({user: json}))\n        .catch(error=>console.error(error));\n    }\n\n    checkLogin(){\n        fetch('https://share-a-mixtape.herokuapp.com/users/session_id',{\n            headers:{\n              Authorization: `Bearer ${localStorage.getItem('mixtape_token')}`\n            }\n        })\n        .then(response=>response.json())\n        .then(json=>{\n            if(json.id){\n              this.setState({login:true, session_id:json.id})\n            }\n        })\n    }\n\n    handleDelete(id,title){\n         // event.preventDefault();\n         if(this.state.login){\n             let answer = prompt(`Are you sure you want to delete ${title}? Y/N`)\n             if(answer==\"y\"||answer==\"Y\"){\n                 fetch(`https://share-a-mixtape.herokuapp.com/playlists/${id}`,{\n                     method:'DELETE'\n                 })\n             }\n         }\n    }\n    \n\n    componentDidMount(){\n        this.getUser();\n        this.checkLogin();\n    }\n\n    parsePlaylists(){\n        let result =[]\n        //check if user has been loaded\n        if(this.state.user.playlists){\n            //if user has any playlists..\n            if(this.state.user.playlists.length>0){\n                const playlists = this.state.user.playlists;\n                playlists.map(playlist=>{\n                    result.push(\n                        <li>\n                    <h3><a href={`/playlist/${playlist.id}`}>{playlist.title}</a></h3>\n                    {this.state.login && this.state.session_id == playlist.user_id?\n                        <>\n                        <a href={`/edit_playlist/${playlist.id}`}>Edit</a> \n                        <button onClick={()=>{this.handleDelete(playlist.id,playlist.title)}}>Delete</button>\n                        </>\n                        : <></>}\n                    </li>\n                    )\n                })\n            } else {\n                result = <li>No playlists created yet!</li>\n            }\n        } else {\n            result = <li>...</li>\n        }\n    return result\n    }\n\n    render(){\n        const user = this.state.user\n        return(\n            <>\n            <h1>Userpage</h1>\n            <h2>{user.username}</h2>\n            <ul>\n                {this.parsePlaylists()}\n            </ul>\n            </>\n        )\n    }\n}\n\nexport default Userpage","import React, {Component} from 'react'\n\nclass TrackByID extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n        }\n        this.parseForwardButton = this.parseForwardButton.bind(this)\n        this.parsePlaylistLink = this.parsePlaylistLink.bind(this)\n        this.parseBackButton = this.parseBackButton.bind(this)\n        this.parseTrackInfo = this.parseTrackInfo.bind(this)\n        this.displayVideo = this.displayVideo.bind(this)\n    }\n\n    displayVideo(){\n        if(this.state.playlist){\n            let url = this.state.playlist.tracks[this.props.match.params.track_position-1].url\n            url = url.replace('watch?v=','embed/')\n            return(\n                <iframe width=\"500\" height=\"300\"src={url} title=\"videoframe\"></iframe>\n            )\n        }\n    }\n\n    getPlaylist(){\n        fetch(`https://share-a-mixtape.herokuapp.com/playlists/${this.props.match.params.playlist_id}`)\n        .then(response=>response.json())\n        .then(json=>this.setState({playlist: json}))\n        .catch(error=>console.error(error))\n    }\n\n    componentDidMount(){\n        this.getPlaylist()\n        setTimeout(console.log(this.state),5000);\n    }\n\n    parseTrackInfo(){\n        if(this.state.playlist){\n            const track = this.state.playlist.tracks[this.props.match.params.track_position-1]\n            return(\n                <>\n                <h3>{track.title}</h3>\n                <h3>{track.artist}</h3>\n                </>\n            )\n        } else {\n            return(\n                <>\n                <h3>Loading...</h3>\n                </>\n            )\n        }\n    }\n\n    parsePlaylistLink(){\n        if(this.state.playlist){\n            return(\n                <h3>\n                <a href={`/playlist/${this.state.playlist.id}`}>Back To Playlist: {this.state.playlist.title}</a>\n                </h3>\n            )\n        } else {\n            return(\n                <h3>Loading...</h3>\n            )\n        }\n    }\n\n    parseBackButton(){\n        //generate a link to the previous track\n        //of if this is the first track, disable link\n        const playlist_id = this.props.match.params.playlist_id\n        const track_position = this.props.match.params.track_position - 1;\n\n        if(this.state.playlist){\n            if(track_position < 1){\n                return(\n                    <h3>No Previous Track</h3>\n                )\n            } else {\n                return(\n                    <h3>\n                        <a href={`/track/${playlist_id}/${track_position}`}>Previous Track</a>\n                    </h3>\n                )\n            }\n        } else{\n            return( <h3>Loading...</h3>)\n        }\n    }\n\n    parseForwardButton(){\n        //generate a link to the next track\n        //or if this is the last track, disable link\n        const playlist_id = this.props.match.params.playlist_id\n        const track_position = parseInt(this.props.match.params.track_position) + 1;\n        if(this.state.playlist){\n            console.log(this.state.playlist.tracks.length)\n            console.log(track_position)\n            if(track_position > this.state.playlist.tracks.length){\n                return(\n                    <h3>No Next Track</h3>\n                )\n            }else{\n                return(\n                    <h3>\n                    <a href={`/track/${playlist_id}/${track_position}`}>Next Track</a>\n                </h3>\n                )\n            }\n        } else {\n            return( <h3>Loading...</h3>)\n        }\n\n    }\n    render(){\n        return(\n            <>\n            <h1>Track by ID</h1>\n            <div>\n                {this.displayVideo()}\n            </div>\n            <div>\n                {this.parseBackButton()}\n                <div>\n                    {this.parseTrackInfo()}\n                </div>\n                {this.parseForwardButton()}\n            </div>\n            <div>\n                {this.parsePlaylistLink()}\n            </div>\n            </>\n        )\n    }\n}\n\nexport default TrackByID","import React,{Component} from 'react'\n\nclass AllPlaylists extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            playlists:{}\n        }       \n        this.parsePlaylists = this.parsePlaylists.bind(this)\n    }\n\n    getPlaylists(){\n        fetch(`https://share-a-mixtape.herokuapp.com/playlists/`)\n        .then(response=>response.json())\n        .then(json => this.setState({playlists: json}))\n        .catch(error => console.error(error))\n    console.log(\"get playlist\")\n    }\n\n    componentDidMount(){\n        this.getPlaylists();\n    }\n\n    parsePlaylists(){\n        if(this.state.playlists.length>0){\n            return(\n                <>\n                {this.state.playlists.map(playlist=>{\n                    return(\n                        <li>\n                            <a href={`/playlist/${playlist.id}`}>{playlist.title}</a>\n                            <p>{playlist.tags ? playlist.tags : \"No Tags\"}</p>\n                        </li>\n                    )\n                })}\n                </>\n            )\n        }\n    }\n\n    render(){\n        const playlists = this.state.playlists\n        console.log(playlists)\n        return(\n            <>\n            <h1>All Playlists</h1>\n            <ol>\n                {this.parsePlaylists()}\n            </ol>\n            </>\n        )\n    }\n}\n\nexport default AllPlaylists","import React, {Component} from 'react'\n\nclass AllUsers extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            users:[]\n        }\n        this.parseUsers = this.parseUsers.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n        // this.handleSubmit = this.handleSubmit.bind(this);\n        // this.incrementEntryBoxes = this.incrementEntryBoxes.bind(this);\n        // this.decrementEntryBoxes = this.decrementEntryBoxes.bind(this);\n        // this.handleTrackFormChange = this.handleTrackFormChange.bind(this);\n    }\n\n    getUsers(){\n        fetch('https://share-a-mixtape.herokuapp.com/users')\n        .then(response=>response.json())\n        .then(json=>this.setState({users:json}))\n        .catch(error=>console.error(error))\n    }\n\n    componentDidMount(){\n        this.getUsers()\n    }\n\n    parseUsers(){\n        if(this.state.users.length>0){\n            return(\n                <>\n                {this.state.users.map(user=>{\n                    return(\n                        <li>\n                            <h3><a href={`/users/${user.id}`}>{user.username}</a></h3>\n                            { user.playlists ? <p>{user.playlists.length} Playlists</p> : <h4>No Playlists</h4>}\n                        </li>\n                    )\n                })}\n                </>\n            )\n        }\n    }\n    render(){\n        return(\n            <>\n            <h1>All Users</h1>\n            <ul>\n                {this.parseUsers()}\n            </ul>\n            </>\n        )\n    }\n}\n\nexport default AllUsers","import React, {Component} from 'react'\n\nclass TagSearch extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            playlists:[],\n            alltags:[],\n            searchterm: ''\n        }\n        this.parseAllTags = this.parseAllTags.bind(this)\n        this.parsePlaylists = this.parsePlaylists.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleSubmit(event){\n        event.preventDefault()\n        this.getPlaylists(this.state.searchterm)\n    }\n\n    handleChange(event){\n        this.setState({[event.target.id]: event.target.value})\n    }\n\n    getPlaylists(searchTerm){\n        fetch(`https://share-a-mixtape.herokuapp.com/playlists/tagsearch/${searchTerm}`)\n        .then(response=>response.json())\n        .then(json => this.setState({playlists: json}))\n        .catch(error => console.error(error))\n        console.log(\"get playlist\")\n    }\n\n    getAllTags(){\n        fetch('https://share-a-mixtape.herokuapp.com/playlists/alltags')\n        .then(response=>response.json())\n        .then(jsonTags => this.setState({alltags: jsonTags}))\n        .catch(error=>console.error(error))\n    }\n\n    componentDidMount(){\n        this.getAllTags()\n    }\n\n    search(searchTerm){\n        this.getPlaylists(searchTerm);\n    }\n\n    parseAllTags(){\n        //initialize an empty array\n        let masterlist=[]\n        //loop through each list of tags in alltags\n        for(const obj of this.state.alltags){\n            //if list has data in it\n            if(obj.tags){\n                //separate each word in the list\n                let arr = obj.tags.split(\" \")\n                //if that word is not already in the masterlist, add it\n                for(const e of arr){\n                    if(!masterlist.includes(e)){\n                        masterlist.push(e)\n                    }\n                }\n            }\n        }\n\n        return(\n            <div>\n                {masterlist.map(e=>{\n                    return(\n                        <span onClick={()=>{this.getPlaylists(e)}}>{e}</span>\n                    )\n                })}\n            </div>\n        )\n        \n    }\n\n    parsePlaylists(){\n        //this will trigger when state is updated\n        return(\n            <div>\n                {this.state.playlists.map(playlist=>{\n                    return(\n                        <p><a href={`/playlist/${playlist.id}`}>{playlist.title}</a></p>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <>\n            <h1>Tag Search</h1>\n            <p>Search box goes here</p>\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor=\"searchterm\">Enter a tag to search for:</label>\n                <input type=\"text\" id=\"searchterm\" onChange={this.handleChange}/>\n                <input type=\"submit\" value=\"Search\"/>\n            </form>\n            <p>List of all tags:</p>\n            {this.parseAllTags()}\n            <p>Search Results:</p>\n            {this.parsePlaylists()}\n            </>\n        )\n    }\n}\n\nexport default TagSearch","import React, {Component} from 'react'\n\nclass LoginPage extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n\n        }\n        this.handleLogin = this.handleLogin.bind(this)\n        this.handleCreateUser = this.handleCreateUser.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleLogin(event){\n        event.preventDefault();\n        fetch('https://share-a-mixtape.herokuapp.com/users/login',{\n            body: JSON.stringify({user:{\n                username:this.state.username,\n                password:this.state.password\n            }}),\n            method:'POST',\n            headers:{\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response=>response.json())\n        .then(json=>{\n            localStorage.setItem('mixtape_token',json.token)\n            console.log(json)\n        })\n    }\n\n    handleCreateUser(event){\n        event.preventDefault();\n        fetch('https://share-a-mixtape.herokuapp.com/users',{\n            body: JSON.stringify({\n                username:this.state.new_username,\n                password:this.state.new_password\n            }),\n            method:'POST',\n            headers:{\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(newUser=>newUser.json())\n        .then(jsonUser=>console.log(jsonUser))\n        .catch(error=>console.error(error))\n    }\n    \n    handleChange(event){\n        this.setState({[event.target.id]:event.target.value})\n    }\n\n    render(){\n        return(\n            <>\n            <h1>Login</h1>\n            <h2>Sign in:</h2>\n            <form onSubmit={this.handleLogin}>\n                <label htmlFor=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" onChange={this.handleChange}/>\n                <label htmlFor=\"password\">Password:</label>\n                <input type=\"text\" id=\"password\" onChange={this.handleChange}/>\n                <input type=\"submit\" value=\"Log in\"/>\n            </form>\n            <h2>Or Create an Account:</h2>\n            <form onSubmit={this.handleCreateUser}>\n                <label htmlFor=\"new_username\">Username:</label>\n                <input type=\"text\" id=\"new_username\" onChange={this.handleChange}/>\n                <label htmlFor=\"new_password\">Password:</label>\n                <input type=\"text\" id=\"new_password\" onChange={this.handleChange}/>\n                <input type=\"submit\" value=\"Create Account\"/>\n            </form>\n            </>\n        )\n    }\n}\n\nexport default LoginPage","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Home from './components/Home'\nimport PlaylistByID from './components/PlaylistByID'\nimport CreatePlaylist from './components/CreatePlaylist'\nimport EditPlaylist from './components/EditPlaylist'\nimport Userpage from './components/Userpage'\nimport TrackByID from './components/TrackByID'\nimport AllPlaylists from './components/AllPlaylists'\nimport AllUsers from './components/AllUsers'\nimport TagSearch from './components/TagSearch'\nimport LoginPage from './components/LoginPage';\n\nconst backend = 'http://localhost:3000'\n\nclass App extends Component {\n  constructor(props){\n  super(props)\n  this.state={\n      login:false\n    }\n    this.parseLogin = this.parseLogin.bind(this)\n    this.parseUserpage = this.parseUserpage.bind(this)\n    this.forceLogout = this.forceLogout.bind(this)\n  }\n\n  getUser(){\n    fetch('http://localhost:3000/users/session_id',{\n      headers:{\n        Authorization: `Bearer ${localStorage.getItem('mixtape_token')}`\n      }\n    })\n    .then(response=>response.json())\n    .then(json=>{\n      if(json.id){\n        this.setState({login:true,user:json})\n      }\n      console.log(json)\n    })\n  }\n\n  forceLogout(){\n    localStorage.setItem('mixtape_token',\"\")\n    this.forceUpdate();\n  }\n  \n  parseLogin(){\n    if(this.state.login){\n      //display 'log out' button\n      return <a href=\"/home\" onClick={this.forceLogout}>Log Out</a>\n    } else {\n      //display 'log in' button\n      return <a href=\"/login\">Log In</a>\n    }\n  }\n\n  parseUserpage(){\n    if(this.state.login){\n      //display link to userpage\n    return <p><a href={`/users/${this.state.user.id}`}>{this.state.user.username}</a></p>\n    } else {\n      return <p>Not Signed in</p>\n    }\n  }\n\n  componentDidMount(){\n    this.getUser();\n  }\n\n  render(){\n    return(\n      <BrowserRouter>\n        {/* Things that show up on every page go here */}\n        <h1>Share a Mixtape!</h1>\n        {this.parseUserpage()}\n        <nav>\n          <a href=\"/home\">Home</a>\n          <a href=\"/new_playlist\">Create New Playlist</a>\n          <a href=\"/all\">All Playlists</a>\n          <a href=\"/allusers\">All Users</a>\n          <a href=\"/tagsearch\">Tag Search</a>\n          {this.parseLogin()}\n        </nav>\n      <Switch>\n        {/* Individual Pages Go Here */}\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/playlist/:id\" component={PlaylistByID}/>\n        <Route path=\"/new_playlist\" component={CreatePlaylist}/>\n        <Route path=\"/edit_playlist/:id\" component={EditPlaylist}/>\n        <Route path=\"/users/:id\" component={Userpage}/>\n        <Route path=\"/track/:playlist_id/:track_position\" component={TrackByID}/>\n        <Route path=\"/all\" component = {AllPlaylists}/>\n        <Route path=\"/allusers\" component = {AllUsers}/>\n        <Route path=\"/tagsearch\" component = {TagSearch}/>\n        <Route path=\"/login\" component={LoginPage}/>\n      </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}